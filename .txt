commit b7f9d82a03470c3267a4fe8bec719e3afe045125
tree 53cae73fd85b9f3abc3b7727fa99071765206e6f
parent 89fc3a89c8e535e39b42b8fd53341209d0ab3e2a
author Shayan <shayanbahal@gmail.com> 1555092993 -0400
committer Shayan <shayanbahal@gmail.com> 1555092993 -0400

    Wide table

diff --git a/erc20-multiple-withdrawal-attack/figures/multiple_withdrawal_04_wide.png b/erc20-multiple-withdrawal-attack/figures/multiple_withdrawal_04_wide.png
new file mode 100644
index 0000000..bdc8ba3
Binary files /dev/null and b/erc20-multiple-withdrawal-attack/figures/multiple_withdrawal_04_wide.png differ
diff --git a/erc20-multiple-withdrawal-attack/files/Table.numbers b/erc20-multiple-withdrawal-attack/files/Table.numbers
new file mode 100755
index 0000000..4ca0db4
Binary files /dev/null and b/erc20-multiple-withdrawal-attack/files/Table.numbers differ
diff --git a/erc20-multiple-withdrawal-attack/main.pdf b/erc20-multiple-withdrawal-attack/main.pdf
index 88e022e..4190fb6 100644
Binary files a/erc20-multiple-withdrawal-attack/main.pdf and b/erc20-multiple-withdrawal-attack/main.pdf differ
diff --git a/erc20-multiple-withdrawal-attack/main.tex b/erc20-multiple-withdrawal-attack/main.tex
index cf56386..8424f4d 100644
--- a/erc20-multiple-withdrawal-attack/main.tex
+++ b/erc20-multiple-withdrawal-attack/main.tex
@@ -39,6 +39,9 @@
 %=====================================================================================
 \begin{document}
 
+\pagenumbering{roman}
+
+
 \title{Resolving the Multiple Withdrawal Attack in ERC20 Tokens}
 \author{
 	\IEEEauthorblockN{Reza Rahimian, Shayan Eskandari, Jeremy Clark}
diff --git a/erc20-multiple-withdrawal-attack/sections/introduction.tex b/erc20-multiple-withdrawal-attack/sections/introduction.tex
index 89c75f7..eea8cca 100644
--- a/erc20-multiple-withdrawal-attack/sections/introduction.tex
+++ b/erc20-multiple-withdrawal-attack/sections/introduction.tex
@@ -2,6 +2,9 @@
 
 \section{Introduction}
 
+%Note: talk about why it matters to fix ERC20 implementation: cause it is supported by the eco-system, a fixed erc20 implementation can be added to any DEX.
+
+
 Ethereum is a public blockchain proposed in 2013, deployed in 2015~\cite{Ref00}, and has the second largest market cap at the time of writing\footnote{CoinMarketCap - Ethereum currency - Accessed: 2019-02-11 \newline\url{https://coinmarketcap.com/currencies/ethereum/}}. It has a large development community which track enhancements and propose new ideas.\footnote{CoinDesk Crypto-Economics Explorer - Accessed: 2019-02-11 \newline\url{https://www.coindesk.com/data}} Ethereum enables decentralized applications (\dapps) to be deployed and executed. DApps can accept and transfer Ethereum's built-in currency (ETH) or might issue their own custom currency-like tokens for specific purposes. Tokens might be currencies with different properties than ETH, they may be required for access to a DApp's functionality or they might represent ownership of some off-blockchain asset. It is beneficial to have interoperable tokens with other DApps and off-blockchain webapps, such as exchange services that allow tokens to be traded.
 
 Toward this goal, the Ethereum project accepted a proposed standard (called ERC20~\cite{Ref08}) for a set of methods which standard-compliant tokens should implement. In terms of object oriented programming, ERC20 is an interface that defines abstract methods (name, parameters, return types) and provides guidelines on how the methods should be implemented, however it does not provide a actual concrete implementation (see Figure~\ref{fig:erc20api}). 
@@ -25,8 +28,7 @@ Since introduction of ERC20 API in November 2015, several vulnerabilities have b
 
 \subsubsection*{Contributions} In this paper, we analyze 10 proposed solutions and evaluate them in accordance with (A) backward compatibility with already deployed smart contracts and (B) attack mitigation while adhering specifications of the standard (see the summary in Figure~\ref{tab:comp}). Since none of them precisely satisfy constraints of ERC20 standard, we were motivated to work on new solutions to mitigate the attack. Specifically, we propose two new approaches: each secures one of the two vulnerable methods (\ie \texttt{approve} or \texttt{transferFrom}). The first one, mitigates the attack by comparing transferred tokens with the current allowance in the \texttt{approve} method. It uses \textit{Compare and Set (CAS)} pattern\cite{Ref06} to cover gap between transactions as root cause of the attack. CAS is one of the most widely used lock-free synchronization strategy that allows comparing and setting values in an atomic way. By leveraging this pattern, the gap between transactions will be removed and there is no possibility of effecting the attack. We would consider this solution as partially ERC20-compliant solution since it violates one of ERC20 constraints that prohibits any adjustment in the allowance. As discussed in section~\ref{sec:proposal1}, it would not be feasible to secure \texttt{approve} method without adjusting spender allowance. Alternatively, securing \texttt{transferFrom} method has been considered as effective mitigation approach by not allowing token transfers more than allowed.
 
-\begin{figure}[t!]
-	\centering
-	\includegraphics[width=1.0\linewidth]{figures/multiple_withdrawal_34.png}
+\begin{figure*}[h]
+\subfloat[]{\includegraphics[width=\textwidth]{figures/multiple_withdrawal_04_wide.png}}
 	\caption{Comparison of 10 suggested solutions with two proposals contributed by this paper. In proposal 1, CAS pattern is used to mitigate the attack by comparing transferred tokens with new allowance. It is partially ERC20-compliant since it adjusts the allowance. In proposal 2, a new local variable has been defined to keep tracking of transferred tokens and prevent more transfers in case of already transferred tokens. It secures \texttt{transferFrom} function and prevents the attack.\label{tab:comp}}
-\end{figure}
+\end{figure*}
diff --git a/erc20-multiple-withdrawal-attack/sections/preliminaries.tex b/erc20-multiple-withdrawal-attack/sections/preliminaries.tex
index 0b5f065..aca35ea 100644
--- a/erc20-multiple-withdrawal-attack/sections/preliminaries.tex
+++ b/erc20-multiple-withdrawal-attack/sections/preliminaries.tex
@@ -21,7 +21,7 @@ An adversary can exploit the gap between execution of \texttt{approve} and \text
 	\item Bob can call \texttt{transferFrom} method again and transfers M additional tokens by executing \texttt{transferFrom(\_Alice, \_Bob, M)}.
 \end{compactlistn}
 In summary, in attempting to change Bob's allowance from N to M, Alice makes it possible for Bob to transfer N+M of her tokens. We operate on the assumption that a secure implementation would prevent Bob from withdrawing Alice's tokens multiple times when the allowance changes from N to M (see Figure~\ref{fig:mwa}). If Bob could withdraw N tokens after Alice initial approval, this would be considered as legitimate transfer, since Alice has already approved it. In other words, it would be the responsibility of Alice to make sure tokens have not been transferred before modifying her approval for Bob.
-\begin{figure}[t!]
+\begin{figure}[ht]
 	\centering
 	\includegraphics[width=1.0\linewidth]{figures/multiple_withdrawal_02.png}
 	\caption{Possible multiple withdrawal attack in ERC20 tokens when Alice changes Bob's allowance from N to M. By front-running, Bob is able to move N+M tokens from token pool of Alice.\label{fig:mwa}}
